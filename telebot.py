import os
from dotenv import load_dotenv
from telegram import ForceReply, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, Update
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, ConversationHandler, CallbackContext, filters, CallbackQueryHandler

from models.city_model import get_city_id
from models.district_model import get_district_id
from models.hospital_model import get_hospital_id
from models.user_model import User, add_user_to_db, get_hospital_link, get_hospital_data

from db.parser import get_lights

EMPTY, REGION, CITY, DISTRICT, HOSPITAL = range(5)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
async def start(update: Update, context: CallbackContext) -> int:
    user = update.effective_user
    keyboard = [
        [InlineKeyboardButton('–í—ã–±—Ä–∞—Ç—å –±–æ–ª—å–Ω–∏—Ü—É –¥–ª—è —Å–¥–∞—á–∏ –∫—Ä–æ–≤–∏', callback_data='choose_hospital')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç {user.full_name}! –≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–æ–Ω–æ—Ä—Å–∫–æ–≥–æ —Å–≤–µ—Ç–æ—Ñ–æ—Ä–∞. –î–∞–≤–∞–π –≤—ã–±–µ—Ä–µ–º –±–æ–ª—å–Ω–∏—Ü—É", reply_markup=reply_markup)
    return REGION
    

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    # –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ —Ä–µ–≥–∏–æ–Ω
    await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:")
    return DISTRICT
    

# –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥
async def get_city(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    city = update.message.text
    found_city, result = get_city_id(city)
    if not found_city:
        if result:
            await update.message.reply_text(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –í–æ–∑–º–æ–∂–Ω–æ –í—ã –∏–º–µ–ª–∏ –≤–≤–∏–¥—É:\r\n {'\r\n'.join(result)}")
        else:
            await update.message.reply_text(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ù–∏—á–µ–≥–æ –ø–æ—Ö–æ–∂–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return CITY
    context.user_data['city'] = result
    await update.message.reply_text(f"–í–∞—à –≥–æ—Ä–æ–¥: {city}. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–∞–π–æ–Ω:")
    return EMPTY  # –ü–æ—Å–ª–µ —Ä–∞–π–æ–Ω–∞ –º–æ–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É

# –ü–æ–ª—É—á–∞–µ–º —Ä–∞–π–æ–Ω
async def get_district(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    district = update.message.text
    found_dist, result = get_district_id(district)
    if not found_dist:
        if result:
            await update.message.reply_text(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –í–æ–∑–º–æ–∂–Ω–æ –í—ã –∏–º–µ–ª–∏ –≤–≤–∏–¥—É:\r\n{'\r\n'.join(result)}")
        else:
            await update.message.reply_text(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ù–∏—á–µ–≥–æ –ø–æ—Ö–æ–∂–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return CITY
    context.user_data['district'] = result

    # –í—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Å–æ–ª—å
    city = context.user_data.get('city')

    reply_markup = ReplyKeyboardMarkup(
        [[hospital_name[1]] for hospital_name in get_hospital_id(city_id=city, district_id=result)]
    )

    await update.message.reply_text(f"–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –±–æ–ª—å–Ω–∏—Ü—É", reply_markup=reply_markup)
    print(f"City: {city}, District: {district}")

      # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥
    return HOSPITAL

async def get_hospital(update: Update, context: ContextTypes.DEFAULT_TYPE):
    region = context.user_data.get('region')
    city = context.user_data.get('city')
    district = context.user_data.get('district')

    hospital_id = get_hospital_id(city_id=city, district_id=district, name=update.message.text).id
    telegram_id = update.effective_user.id
    new_user = User(
        telegram_id=telegram_id,
        hospital_id=hospital_id
    )
    add_user_to_db(new_user)
    await update.message.reply_text(generate_reply(telegram_id), reply_markup=None)
    return ConversationHandler.END

def generate_reply(tg_id):
    url = get_hospital_link(tg_id)
    lights = get_lights(url)
    hospital_data = get_hospital_data(tg_id)

    lights_text = ""
    lights_text += f"‚ùóÔ∏è0 (I):\n\t‚ùïRh+: {lights['0 (I)']['Rh+']} - {about_text(lights['0 (I)']['Rh+'])}"
    lights_text += f"\n\t‚ùïRh-: {lights['0 (I)']['Rh-']} - {about_text(lights['0 (I)']['Rh-'])}\n"
    lights_text += f"‚ùóÔ∏èA (II):\n\t‚ùïRh+: {lights['A (II)']['Rh+']} - {about_text(lights['A (II)']['Rh+'])}"
    lights_text += f"\n\t‚ùïRh-: {lights['A (II)']['Rh-']} - {about_text(lights['A (II)']['Rh-'])}\n"
    lights_text += f"‚ùóÔ∏èB (III):\n\t‚ùïRh+: {lights['B (III)']['Rh+']} - {about_text(lights['B (III)']['Rh+'])}"
    lights_text += f"\n\t‚ùïRh-: {lights['B (III)']['Rh-']} - {about_text(lights['B (III)']['Rh-'])}\n"
    lights_text += f"‚ùóÔ∏èAB (IV):\n\t‚ùïRh+: {lights['AB (IV)']['Rh+']} - {about_text(lights['AB (IV)']['Rh+'])}"
    lights_text += f"\n\t‚ùïRh-: {lights['AB (IV)']['Rh-']} - {about_text(lights['AB (IV)']['Rh-'])}\n"

    reply_text = f"""üè• –í–∞—à–∞ –±–æ–ª—å–Ω–∏—Ü–∞:
{hospital_data['name']}
üìç –ù–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ –∞–¥—Ä–µ—Å—É: {hospital_data['address']}
üö¶–í–∞—à —Å–≤–µ—Ç–æ—Ñ–æ—Ä:
{lights_text}
"""
    return reply_text

def about_text(data):
    if 'üü¢' in data:
        return '–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –∑–∞–ø–∞—Å –∫—Ä–æ–≤–∏. –° –≤–∏–∑–∏—Ç–æ–º –≤ –°–ª—É–∂–±—É –∫—Ä–æ–≤–∏ –º–æ–∂–Ω–æ –ø–æ–≤—Ä–µ–º–µ–Ω–∏—Ç—å.'
    elif 'üü°' in data:
        return '–ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤–∏–∑–∏—Ç –¥–ª—è –ø–ª–∞–Ω–æ–≤–æ–π –¥–æ–Ω–∞—Ü–∏–∏.'
    elif 'üî¥' in data:
        return '–ø–æ–≤—ã—à–µ–Ω–Ω–∞—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤–∏–∑–∏—Ç –¥–ª—è –ø–ª–∞–Ω–æ–≤–æ–π –¥–æ–Ω–∞—Ü–∏–∏.'
    elif '‚ö™Ô∏è' in data:
        return '–Ω–µ –∏–º–µ–µ—Ç —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π –≤–≤–∏–¥—É –∑–∞–≥–æ—Ç–æ–≤–∫–∏ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–æ–Ω–æ—Ä—Å–∫–æ–π –ø–ª–∞–∑–º—ã'
    else:
        return '–¥–æ–Ω–æ—Ä—Å–∫–∏–π —Å–≤–µ—Ç–æ—Ñ–æ—Ä –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª—Å—è –±–æ–ª–µ–µ 3-—Ö –Ω–µ–¥–µ–ª—å.'

# –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

def main():
    load_dotenv()
    app = ApplicationBuilder().token(os.getenv('TELEGRAM_API')).build()

    conversation_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            REGION: [CallbackQueryHandler(button_callback, pattern='choose_hospital')],
            DISTRICT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_city)],
            EMPTY: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_district)],
            HOSPITAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_hospital)]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    app.add_handler(conversation_handler)
    app.run_polling()